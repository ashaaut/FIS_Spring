package com.fis.springjpa;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

@RestController  // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

   // Map ONLY POST Requests
//  public String addNewUser (@RequestParam String name
//      , @RequestParam String email) {
//    // @ResponseBody means the returned String is the response, not a view name
//    // @RequestParam means it is a parameter from the GET or POST request
//
//    User n = new User();
//    n.setName(name);
//    n.setEmail(email);
//    userRepository.save(n);
//    return "Saved";
//  }
  @PostMapping("/add")
  public String addNewUser(@RequestBody User user) {
	  userRepository.save(user);
	  return "Saved";
  }
  @PutMapping("/edit")
  public String updateUser(@RequestBody User user) {
	  Optional<User>u=userRepository.findById(user.getId());
	  if(u.isPresent()) {
		  userRepository.save(user);
		  return "updated";
	  }else {
		  return "user not found";
	  }
  }
  @GetMapping(path="/all")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }
  @DeleteMapping("/delete")
  public String deleteUser(@RequestParam int id) {
	  Optional<User>u=userRepository.findById(id);
	  if(u.isPresent()) {
		  userRepository.delete(u.get());
		  return "deleted";
	  }else {
		  return "user not found";
	  }
	  
  }
  @GetMapping("/{id}")
  public Optional<User> getUser(@PathVariable int id){
	  Optional<User> u=userRepository.findById(id);
	  if(u.isPresent()) {
		  return Optional.ofNullable(u.get());
	  }else {
		  return Optional.empty();
	  }
	  
  }
}
